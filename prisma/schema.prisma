// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Privacy {
  PUBLIC
  FOLLOWERS
  PRIVATE
}

enum ReactionType {
  LIKE
  LOVE
  LAUGH
  ANGRY
  SAD
}

model User {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  email           String     @unique
  role            Role       @default(USER)
  password        String
  image           String?
  cover           String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  PostByAuthor    Post[]     @relation("postByAuthor")
  PostByRecipient Post[]     @relation("postByRecipient")
  Comments        Comments[]
  Reaction        Reaction[]
}

model Post {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  privacy     Privacy    @default(PUBLIC)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  author      User       @relation("postByAuthor", fields: [authorId], references: [id])
  authorId    String     @db.ObjectId
  recipient   User       @relation("postByRecipient", fields: [recipientId], references: [id])
  recipientId String     @db.ObjectId
  Comments    Comments[]
  Reaction    Reaction[]
}

model Comments {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  author    User       @relation(fields: [authorId], references: [id])
  authorId  String     @db.ObjectId
  post      Post       @relation(fields: [postId], references: [id])
  postId    String     @db.ObjectId
  Reaction  Reaction[]
}

model Reaction {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  type      ReactionType
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  user      User         @relation(fields: [userId], references: [id])
  userId    String       @db.ObjectId
  post      Post?        @relation(fields: [postId], references: [id])
  postId    String?      @db.ObjectId
  comment   Comments?    @relation(fields: [commentId], references: [id])
  commentId String?      @db.ObjectId
}
